[{"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\index.js":"1","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\App.js":"2","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\reportWebVitals.js":"3","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\context\\globalState.js":"4","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\styles\\index.js":"5","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\context\\reducers.js":"6","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\index.js":"7","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\map.js":"8","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\styles\\mapContainer.js":"9","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\styles\\loading.js":"10","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\styles\\map.js":"11"},{"size":500,"mtime":1606244812375,"results":"12","hashOfConfig":"13"},{"size":569,"mtime":1607321182371,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1606244812375,"results":"15","hashOfConfig":"13"},{"size":914,"mtime":1607186472691,"results":"16","hashOfConfig":"13"},{"size":361,"mtime":1607321639119,"results":"17","hashOfConfig":"13"},{"size":309,"mtime":1607186468670,"results":"18","hashOfConfig":"13"},{"size":2331,"mtime":1607393624831,"results":"19","hashOfConfig":"13"},{"size":4475,"mtime":1607323777656,"results":"20","hashOfConfig":"13"},{"size":401,"mtime":1607296024748,"results":"21","hashOfConfig":"13"},{"size":522,"mtime":1607294578216,"results":"22","hashOfConfig":"13"},{"size":200,"mtime":1607321685679,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1czyafb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\index.js",[],["49","50"],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\App.js",[],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\reportWebVitals.js",[],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\context\\globalState.js",[],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\styles\\index.js",[],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\context\\reducers.js",["51"],"export default (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_GEO_DATA\":\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case \"LAST_DATA_UPDATE\":\n      return {\n        ...state,\n        lastRequest: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\index.js",["52","53","54"],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\map.js",["55"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { MapContainer } from \"./styles/map\";\r\nconst MapboxGLMap = ({ geoData, position }) => {\r\n  const [map, setMap] = useState(null);\r\n  const mapContainer = useRef(null);\r\n\r\n  const handleMap = () => {\r\n    mapboxgl.accessToken =\r\n      \"pk.eyJ1IjoiZG9yaWFubXgzIiwiYSI6ImNrMTcwa2Z4cjAyb3czY254bW9uNWx5eTYifQ.6UUrz0l4ueqe5W4j8QGd4w\";\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n        center: [-115.606391900599817, 32.673693943392962],\r\n        zoom: 14,\r\n      });\r\n      setMap(map);\r\n\r\n      map.on(\"load\", function () {\r\n        map.loadImage(\r\n          \"https://img.icons8.com/offices/344/north-direction.png\",\r\n          // Add an image to use as a custom marker\r\n          function (error, image) {\r\n            if (error) throw error;\r\n            map.addImage(\"custom-marker\", image);\r\n\r\n            map.addSource(\"tech\", {\r\n              type: \"geojson\",\r\n              data: {\r\n                type: \"FeatureCollection\",\r\n                features: geoData,\r\n              },\r\n            });\r\n\r\n            // Add a layer showing the tech.\r\n            map.addLayer({\r\n              id: \"tech\",\r\n              type: \"symbol\",\r\n              source: \"tech\",\r\n              layout: {\r\n                \"icon-image\": \"custom-marker\",\r\n                \"icon-allow-overlap\": true,\r\n                \"icon-rotate\": [\"get\", \"bearing\"],\r\n                \"icon-size\": 0.08,\r\n              },\r\n            });\r\n          }\r\n        );\r\n\r\n        map.addSource(\"maine\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Polygon\",\r\n              coordinates: [\r\n                [\r\n                  [-115.585956, 32.664452],\r\n                  [-115.620723, 32.664646],\r\n                  [-115.620720, 32.679375],\r\n                  [-115.604862, 32.679991],\r\n                  [-115.595743, 32.679846],\r\n                  [-115.585860, 32.679496],\r\n                  [-115.585956, 32.664452],\r\n                ],\r\n              ],\r\n            },\r\n          },\r\n        });\r\n        map.addLayer({\r\n          id: \"maine\",\r\n          type: \"fill\",\r\n          source: \"maine\",\r\n          layout: {},\r\n          paint: {\r\n            \"fill-color\": \"#f89e1b\",\r\n            \"fill-opacity\": 0.5,\r\n          },\r\n        });\r\n\r\n        // Create a popup, but don't add it to the map yet.\r\n        var popup = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false,\r\n        });\r\n\r\n        map.on(\"mouseenter\", \"tech\", function (e) {\r\n          // Change the cursor style as a UI indicator.\r\n          map.getCanvas().style.cursor = \"pointer\";\r\n\r\n          var coordinates = e.features[0].geometry.coordinates.slice();\r\n          var description = e.features[0].properties.name;\r\n          var lastUpdate = e.features[0].properties.tsecs;\r\n\r\n          // Ensure that if the map is zoomed out such that multiple\r\n          // copies of the feature are visible, the popup appears\r\n          // over the copy being pointed to.\r\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n          }\r\n\r\n          // Populate the popup and set its coordinates\r\n          // based on the feature found.\r\n          popup\r\n            .setLngLat(coordinates)\r\n            .setHTML(\r\n              `<h4>${description}</h4> <p>last updated: ${Math.floor(\r\n                lastUpdate / 60\r\n              )}</p>`\r\n            )\r\n            .addTo(map);\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"tech\", function () {\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n      });\r\n    };\r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleMap();\r\n  }, [map]);\r\n\r\n  useEffect(() => {\r\n    if (map !== null && geoData !== undefined && position > 0) {\r\n      map.getSource(\"tech\").setData({\r\n        type: \"FeatureCollection\",\r\n        features: geoData,\r\n      });\r\n    }\r\n  }, [geoData, position, map]);\r\n\r\n  return <MapContainer ref={(el) => (mapContainer.current = el)} />;\r\n};\r\n\r\nexport default MapboxGLMap;\r\n","C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\styles\\mapContainer.js",[],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\styles\\loading.js",[],"C:\\Users\\DM109\\Documents\\Github\\RaptorMaps\\src\\components\\map\\styles\\map.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":1,"nodeType":"62","endLine":16,"endColumn":3},{"ruleId":"63","severity":1,"message":"64","line":24,"column":84,"nodeType":"65","messageId":"66","endLine":24,"endColumn":86},{"ruleId":"67","severity":1,"message":"68","line":38,"column":6,"nodeType":"69","endLine":38,"endColumn":8,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":60,"column":6,"nodeType":"69","endLine":60,"endColumn":23,"suggestions":"72"},{"ruleId":"67","severity":1,"message":"73","line":128,"column":6,"nodeType":"69","endLine":128,"endColumn":11,"suggestions":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'updateGeoData' and 'updateLastDataRequest'. Either include them or remove the dependency array.","ArrayExpression",["77"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'handleMap'. Either include it or remove the dependency array.",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [updateGeoData, updateLastDataRequest]",{"range":"86","text":"87"},"Update the dependencies array to be: [data, geoDataPosition]",{"range":"88","text":"89"},"Update the dependencies array to be: [handleMap, map]",{"range":"90","text":"91"},[1391,1393],"[updateGeoData, updateLastDataRequest]",[1915,1932],"[data, geoDataPosition]",[4116,4121],"[handleMap, map]"]